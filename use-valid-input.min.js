import{useState,useEffect,useRef,useMemo,useCallback}from"react";import assign from"assign-variable";import _StringSpec from"string-spec";import{forceString,forceObject}from"types.js";const isTabKey=e=>"Tab"===e.key||9===e.keyCode,isEnterKey=e=>"Enter"===e.key||13===e.keyCode,isEscapeKey=e=>"Escape"===e.key||27===e.keyCode,defaultSettings={initialValue:"",focus:!1,focusOnSetValue:!0,touchedOnChange:!1,trimOnBlur:!0},assignSettings=(e,t)=>(e=forceObject(e),{id:assign(e.id,t.id||""),initialValue:assign(e.initialValue,defaultSettings.initialValue),focus:assign(e.focus,defaultSettings.focus),focusOnSetValue:assign(e.focusOnSetValue,defaultSettings.focusOnSetValue),trimOnBlur:assign(e.trimOnBlur,defaultSettings.trimOnBlur),touchedOnChange:assign(e.touchedOnChange,defaultSettings.touchedOnChange),onValidate:assign(e.onValidate,(()=>{})),onDone:assign(e.onDone,(()=>{}))}),useValidInput=(e,t)=>{const[n,a]=useState(assignSettings(t,e)),u=useRef(null),s=useCallback((()=>n.trimOnBlur&&(u.current.value=u.current.value.trim())),[]),r=useCallback((()=>document.activeElement===u.current),[]),[i,l]=useState(!1),c=(t={})=>{const a=forceString(u.current&&u.current.value,n.initialValue),s=e.validate(a);return s.id=n.id||s.id,s.lastKey=t.key,s.focused=r(),s.changed=a!==n.initialValue,s.touched=n.touchedOnChange?!!s.changed:t.touched||i,s.entered=!!t.hasOwnProperty("entered")&&(!!t.entered&&s.changed),s.valid=!s.error,s.validatedValue=s.error?"":s.value,s.infoState=s.focused&&!s.entered,s.errorState=!(!s.touched||!s.error),s},[o,d]=useState(c()),f=(e={})=>d(c(e)),g=useCallback((()=>{n.trimOnBlur&&(u.current.value=u.current.value.trim()),f({entered:!0})})),S={ref:u,onBlur:g,onKeyDown:e=>{isTabKey(e.key)&&(u.current.value.length&&s(),f({entered:!0,key:"Tab"}))},onKeyUp:e=>{const t={key:e.key};(isEnterKey(e)||isEscapeKey(e))&&(t.entered=!0),isEnterKey(e)?s():isEscapeKey(e)&&u.current.blur(),f(t)},onFocus:e=>{f({touched:!0}),n.touchedOnChange||l(!0)}},y=useCallback((()=>u.current.focus()),[]),h={setFocus:y,setValue:e=>{u.current.value=e,n.focusOnSetValue&&y(),f()}};return useEffect((()=>{u.current.value=n.initialValue,n.focus&&y()}),[]),useEffect((()=>{o.entered&&n.onDone(o),n.onValidate(o)}),[o]),[o,S,h]};useValidInput.init=e=>{Object.keys(e).map((t=>{defaultSettings.hasOwnProperty(t)&&(defaultSettings[t]=assign(e[t],defaultSettings[t]))}))};export const StringSpec=_StringSpec;export default useValidInput;