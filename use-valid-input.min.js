import{useState,useEffect,useRef,useMemo,useCallback}from"react";import assign from"assign-variable";import _StringSpec from"string-spec";import{forceString,forceObject}from"types.js";const isTabKey=e=>"Tab"===e.key||9===e.keyCode,isEnterKey=e=>"Enter"===e.key||13===e.keyCode,isEscapeKey=e=>"Escape"===e.key||27===e.keyCode,defaultSettings={initialValue:"",focus:!1,focusOnSetValue:!0,touchedOnChange:!1,trimOnBlur:!0},assignSettings=(e,t)=>(e=forceObject(e),{id:assign(e.id,t.id||""),initialValue:assign(e.initialValue,defaultSettings.initialValue),focus:assign(e.focus,defaultSettings.focus),focusOnSetValue:assign(e.focusOnSetValue,defaultSettings.focusOnSetValue),trimOnBlur:assign(e.trimOnBlur,defaultSettings.trimOnBlur),touchedOnChange:assign(e.touchedOnChange,defaultSettings.touchedOnChange),onValidate:assign(e.onValidate,(()=>{})),onDone:assign(e.onDone,(()=>{}))}),useValidInput=(e,t)=>{const[n]=useState(assignSettings(t,e)),a=useRef(null),u=useCallback((()=>n.trimOnBlur&&(a.current.value=a.current.value.trim())),[]),s=useCallback((()=>document.activeElement===a.current),[]),[r,i]=useState(!1),l=(t={})=>{const u=forceString(a.current&&a.current.value,n.initialValue),i=e.validate(u);return i.id=n.id||i.id,i.lastKey=t.key,i.focused=s(),i.changed=u!==n.initialValue,i.touched=n.touchedOnChange?!!i.changed:t.touched||r,i.entered=!!t.hasOwnProperty("entered")&&(!!t.entered&&i.changed),i.valid=!i.error,i.validatedValue=i.error?"":i.value,i.infoState=i.focused&&!i.entered,i.errorState=!(!i.touched||!i.error),i},[c,o]=useState(l()),d=(e={})=>o(l(e)),f=useCallback((()=>{n.trimOnBlur&&(a.current.value=a.current.value.trim()),d({entered:!0})})),g={ref:a,onBlur:f,onKeyDown:e=>{isTabKey(e.key)&&(a.current.value.length&&u(),d({entered:!0,key:"Tab"}))},onKeyUp:e=>{const t={key:e.key};(isEnterKey(e)||isEscapeKey(e))&&(t.entered=!0),isEnterKey(e)?u():isEscapeKey(e)&&a.current.blur(),d(t)},onFocus:e=>{d({touched:!0}),n.touchedOnChange||i(!0)}},S=useCallback((()=>a.current.focus()),[]),y={focus:S,setValue:e=>{a.current.value=e,n.focusOnSetValue&&S(),d()}};return useEffect((()=>{a.current.value=n.initialValue,n.focus&&S()}),[]),useEffect((()=>{c.entered&&n.onDone(c),n.onValidate(c)}),[c]),[c,g,y]};useValidInput.init=e=>{Object.keys(e).map((t=>{defaultSettings.hasOwnProperty(t)&&(defaultSettings[t]=assign(e[t],defaultSettings[t]))}))};export const StringSpec=_StringSpec;export default useValidInput;